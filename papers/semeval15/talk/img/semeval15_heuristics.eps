%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 658 257
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, February 16, 2015 2:55:49 PM AST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
658 257 setpagesize
0 0 0 0 setmargins
0 0 setorigin
658 257 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
658.000 0.00000 l
658.000 257.000 l
0.00000 257.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 658 257 rc
q
[ 2.44141 0.00000 0.00000 2.44141 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -821.000 -668.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
821.000 668.000 m
1091.00 668.000 l
1091.00 774.000 l
821.000 774.000 l
821.000 668.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 2.44141 0.00000 0.00000 2.44141 -2004.39 -1630.86 ] defaultmatrix matrix concatmatrix setmatrix
[ 2.44141 0.00000 0.00000 2.44141 -2004.39 -1630.86 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 2.44141 0.00000 0.00000 2.44141 -2004.39 -1630.86 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
828.723 685.939 m
828.723 707.939 l
828.723 710.148 830.514 711.939 832.723 711.939  c
947.218 711.939 l
949.427 711.939 951.218 710.148 951.218 707.939  c
951.218 685.939 l
951.218 683.729 949.427 681.939 947.218 681.939  c
832.723 681.939 l
830.514 681.939 828.723 683.729 828.723 685.939  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
846.837 694.530 m
847.915 694.530 l
847.915 701.093 l
846.837 701.093 l
846.837 694.530 l
h
846.837 691.968 m
847.915 691.968 l
847.915 693.343 l
846.837 693.343 l
846.837 691.968 l
h
855.639 697.124 m
855.639 701.093 l
854.561 701.093 l
854.561 697.171 l
854.561 696.546 854.439 696.080 854.194 695.773  c
853.949 695.465 853.587 695.312 853.108 695.312  c
852.525 695.312 852.064 695.496 851.725 695.866  c
851.387 696.236 851.218 696.744 851.218 697.390  c
851.218 701.093 l
850.139 701.093 l
850.139 694.530 l
851.218 694.530 l
851.218 695.546 l
851.478 695.150 851.783 694.856 852.132 694.663  c
852.481 694.470 852.884 694.374 853.343 694.374  c
854.093 694.374 854.663 694.606 855.054 695.069  c
855.444 695.533 855.639 696.218 855.639 697.124  c
h
862.511 694.780 m
862.511 695.796 l
862.198 695.619 861.891 695.489 861.589 695.405  c
861.287 695.322 860.979 695.280 860.667 695.280  c
859.958 695.280 859.412 695.502 859.026 695.944  c
858.641 696.387 858.448 697.010 858.448 697.812  c
858.448 698.614 858.641 699.236 859.026 699.679  c
859.412 700.121 859.958 700.343 860.667 700.343  c
860.979 700.343 861.287 700.301 861.589 700.218  c
861.891 700.135 862.198 700.010 862.511 699.843  c
862.511 700.843 l
862.208 700.978 861.896 701.082 861.573 701.155  c
861.250 701.228 860.906 701.265 860.542 701.265  c
859.552 701.265 858.766 700.955 858.182 700.335  c
857.599 699.715 857.307 698.874 857.307 697.812  c
857.307 696.749 857.602 695.911 858.190 695.296  c
858.779 694.681 859.589 694.374 860.620 694.374  c
860.943 694.374 861.263 694.408 861.581 694.476  c
861.899 694.543 862.208 694.645 862.511 694.780  c
h
864.374 691.968 m
865.452 691.968 l
865.452 701.093 l
864.374 701.093 l
864.374 691.968 l
h
867.598 698.499 m
867.598 694.530 l
868.677 694.530 l
868.677 698.468 l
868.677 699.082 868.799 699.546 869.044 699.858  c
869.289 700.171 869.651 700.327 870.130 700.327  c
870.713 700.327 871.174 700.142 871.513 699.773  c
871.851 699.403 872.020 698.895 872.020 698.249  c
872.020 694.530 l
873.098 694.530 l
873.098 701.093 l
872.020 701.093 l
872.020 700.077 l
871.760 700.483 871.458 700.783 871.114 700.976  c
870.770 701.168 870.369 701.265 869.911 701.265  c
869.151 701.265 868.575 701.030 868.184 700.562  c
867.794 700.093 867.598 699.405 867.598 698.499  c
h
879.641 695.530 m
879.641 691.968 l
880.720 691.968 l
880.720 701.093 l
879.641 701.093 l
879.641 700.108 l
879.412 700.494 879.126 700.783 878.782 700.976  c
878.438 701.168 878.022 701.265 877.532 701.265  c
876.740 701.265 876.095 700.947 875.595 700.312  c
875.095 699.676 874.845 698.843 874.845 697.812  c
874.845 696.780 875.095 695.950 875.595 695.319  c
876.095 694.689 876.740 694.374 877.532 694.374  c
878.022 694.374 878.438 694.468 878.782 694.655  c
879.126 694.843 879.412 695.135 879.641 695.530  c
h
875.970 697.812 m
875.970 698.603 876.131 699.226 876.454 699.679  c
876.777 700.132 877.225 700.358 877.798 700.358  c
878.371 700.358 878.821 700.132 879.149 699.679  c
879.477 699.226 879.641 698.603 879.641 697.812  c
879.641 697.020 879.477 696.400 879.149 695.952  c
878.821 695.504 878.371 695.280 877.798 695.280  c
877.225 695.280 876.777 695.504 876.454 695.952  c
876.131 696.400 875.970 697.020 875.970 697.812  c
h
888.555 697.546 m
888.555 698.062 l
883.587 698.062 l
883.639 698.812 883.865 699.379 884.266 699.765  c
884.667 700.150 885.222 700.343 885.930 700.343  c
886.347 700.343 886.751 700.293 887.141 700.194  c
887.532 700.095 887.920 699.942 888.305 699.733  c
888.305 700.765 l
887.910 700.921 887.509 701.043 887.102 701.132  c
886.696 701.220 886.285 701.265 885.868 701.265  c
884.826 701.265 883.998 700.960 883.384 700.351  c
882.769 699.741 882.462 698.916 882.462 697.874  c
882.462 696.801 882.753 695.950 883.337 695.319  c
883.920 694.689 884.701 694.374 885.680 694.374  c
886.566 694.374 887.266 694.658 887.782 695.226  c
888.298 695.793 888.555 696.567 888.555 697.546  c
h
887.477 697.218 m
887.467 696.635 887.300 696.166 886.977 695.812  c
886.654 695.457 886.227 695.280 885.696 695.280  c
885.092 695.280 884.610 695.452 884.251 695.796  c
883.891 696.140 883.686 696.619 883.634 697.233  c
887.477 697.218 l
h
894.501 694.718 m
894.501 695.749 l
894.199 695.593 893.884 695.476 893.555 695.398  c
893.227 695.319 892.886 695.280 892.532 695.280  c
892.001 695.280 891.600 695.361 891.329 695.523  c
891.058 695.684 890.923 695.931 890.923 696.265  c
890.923 696.515 891.019 696.710 891.212 696.851  c
891.404 696.991 891.792 697.124 892.376 697.249  c
892.735 697.343 l
893.506 697.499 894.053 697.728 894.376 698.030  c
894.699 698.332 894.860 698.749 894.860 699.280  c
894.860 699.895 894.618 700.379 894.134 700.733  c
893.649 701.088 892.985 701.265 892.141 701.265  c
891.787 701.265 891.420 701.231 891.040 701.163  c
890.660 701.095 890.261 700.994 889.845 700.858  c
889.845 699.733 l
890.240 699.942 890.631 700.098 891.016 700.202  c
891.402 700.306 891.787 700.358 892.173 700.358  c
892.673 700.358 893.061 700.273 893.337 700.101  c
893.613 699.929 893.751 699.681 893.751 699.358  c
893.751 699.067 893.652 698.843 893.454 698.687  c
893.256 698.530 892.824 698.379 892.157 698.233  c
891.782 698.155 l
891.115 698.010 890.634 697.791 890.337 697.499  c
890.040 697.207 889.891 696.812 889.891 696.312  c
889.891 695.687 890.110 695.207 890.548 694.874  c
890.985 694.541 891.605 694.374 892.407 694.374  c
892.803 694.374 893.178 694.403 893.532 694.460  c
893.886 694.517 894.209 694.603 894.501 694.718  c
h
903.364 697.796 m
902.499 697.796 901.898 697.895 901.559 698.093  c
901.221 698.291 901.052 698.629 901.052 699.108  c
901.052 699.494 901.179 699.799 901.434 700.023  c
901.690 700.246 902.031 700.358 902.458 700.358  c
903.062 700.358 903.544 700.148 903.903 699.726  c
904.263 699.304 904.442 698.739 904.442 698.030  c
904.442 697.796 l
903.364 697.796 l
h
905.520 697.343 m
905.520 701.093 l
904.442 701.093 l
904.442 700.093 l
904.192 700.489 903.885 700.783 903.520 700.976  c
903.156 701.168 902.708 701.265 902.177 701.265  c
901.499 701.265 900.963 701.075 900.567 700.694  c
900.171 700.314 899.973 699.812 899.973 699.187  c
899.973 698.447 900.221 697.890 900.716 697.515  c
901.210 697.140 901.947 696.952 902.927 696.952  c
904.442 696.952 l
904.442 696.843 l
904.442 696.343 904.278 695.957 903.950 695.687  c
903.622 695.416 903.166 695.280 902.583 695.280  c
902.208 695.280 901.841 695.327 901.481 695.421  c
901.122 695.515 900.781 695.650 900.458 695.827  c
900.458 694.827 l
900.854 694.671 901.236 694.556 901.606 694.483  c
901.976 694.411 902.338 694.374 902.692 694.374  c
903.640 694.374 904.348 694.619 904.817 695.108  c
905.286 695.598 905.520 696.343 905.520 697.343  c
h
911.470 692.343 m
912.657 692.343 l
912.657 697.655 l
912.657 698.593 912.826 699.267 913.165 699.679  c
913.503 700.090 914.053 700.296 914.813 700.296  c
915.574 700.296 916.123 700.090 916.462 699.679  c
916.800 699.267 916.970 698.593 916.970 697.655  c
916.970 692.343 l
918.157 692.343 l
918.157 697.812 l
918.157 698.947 917.876 699.806 917.313 700.390  c
916.751 700.973 915.917 701.265 914.813 701.265  c
913.709 701.265 912.876 700.973 912.313 700.390  c
911.751 699.806 911.470 698.947 911.470 697.812  c
911.470 692.343 l
h
924.534 696.983 m
924.784 697.077 925.029 697.265 925.268 697.546  c
925.508 697.827 925.753 698.213 926.003 698.702  c
927.206 701.093 l
925.925 701.093 l
924.815 698.843 l
924.524 698.260 924.242 697.871 923.971 697.679  c
923.701 697.486 923.331 697.390 922.862 697.390  c
921.565 697.390 l
921.565 701.093 l
920.378 701.093 l
920.378 692.343 l
923.050 692.343 l
924.050 692.343 924.797 692.551 925.292 692.968  c
925.787 693.385 926.034 694.015 926.034 694.858  c
926.034 695.411 925.906 695.869 925.651 696.233  c
925.396 696.598 925.024 696.848 924.534 696.983  c
h
921.565 693.312 m
921.565 696.421 l
923.050 696.421 l
923.623 696.421 924.055 696.288 924.346 696.023  c
924.638 695.757 924.784 695.369 924.784 694.858  c
924.784 694.348 924.638 693.963 924.346 693.702  c
924.055 693.442 923.623 693.312 923.050 693.312  c
921.565 693.312 l
h
928.716 692.343 m
929.903 692.343 l
929.903 700.093 l
934.169 700.093 l
934.169 701.093 l
928.716 701.093 l
928.716 692.343 l
h
f
2 J
10.0000 M
.752941 .752941 .752941 RG
0 J
1.45000 M
1.00000 1.00000 1.00000 RG
newpath
828.723 685.939 m
828.723 707.939 l
828.723 710.148 830.514 711.939 832.723 711.939  c
947.218 711.939 l
949.427 711.939 951.218 710.148 951.218 707.939  c
951.218 685.939 l
951.218 683.729 949.427 681.939 947.218 681.939  c
832.723 681.939 l
830.514 681.939 828.723 683.729 828.723 685.939  c
h
S
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
.752941 .752941 .752941 RG
newpath
828.723 727.773 m
828.723 749.773 l
828.723 751.982 830.514 753.773 832.723 753.773  c
947.218 753.773 l
949.427 753.773 951.218 751.982 951.218 749.773  c
951.218 727.773 l
951.218 725.564 949.427 723.773 947.218 723.773  c
832.723 723.773 l
830.514 723.773 828.723 725.564 828.723 727.773  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
838.390 736.365 m
839.469 736.365 l
839.469 742.927 l
838.390 742.927 l
838.390 736.365 l
h
838.390 733.802 m
839.469 733.802 l
839.469 735.177 l
838.390 735.177 l
838.390 733.802 l
h
847.193 738.958 m
847.193 742.927 l
846.115 742.927 l
846.115 739.005 l
846.115 738.380 845.993 737.914 845.748 737.607  c
845.503 737.300 845.141 737.146 844.662 737.146  c
844.079 737.146 843.618 737.331 843.279 737.701  c
842.941 738.070 842.771 738.578 842.771 739.224  c
842.771 742.927 l
841.693 742.927 l
841.693 736.365 l
842.771 736.365 l
842.771 737.380 l
843.032 736.985 843.336 736.690 843.685 736.498  c
844.034 736.305 844.438 736.208 844.896 736.208  c
845.646 736.208 846.217 736.440 846.607 736.904  c
846.998 737.367 847.193 738.052 847.193 738.958  c
h
854.064 736.615 m
854.064 737.630 l
853.752 737.453 853.444 737.323 853.142 737.240  c
852.840 737.156 852.533 737.115 852.221 737.115  c
851.512 737.115 850.965 737.336 850.580 737.779  c
850.194 738.222 850.002 738.844 850.002 739.646  c
850.002 740.448 850.194 741.070 850.580 741.513  c
850.965 741.956 851.512 742.177 852.221 742.177  c
852.533 742.177 852.840 742.136 853.142 742.052  c
853.444 741.969 853.752 741.844 854.064 741.677  c
854.064 742.677 l
853.762 742.813 853.450 742.917 853.127 742.990  c
852.804 743.063 852.460 743.099 852.096 743.099  c
851.106 743.099 850.319 742.789 849.736 742.169  c
849.153 741.550 848.861 740.708 848.861 739.646  c
848.861 738.583 849.155 737.745 849.744 737.130  c
850.332 736.516 851.142 736.208 852.174 736.208  c
852.497 736.208 852.817 736.242 853.135 736.310  c
853.452 736.378 853.762 736.479 854.064 736.615  c
h
855.928 733.802 m
857.006 733.802 l
857.006 742.927 l
855.928 742.927 l
855.928 733.802 l
h
859.152 740.333 m
859.152 736.365 l
860.230 736.365 l
860.230 740.302 l
860.230 740.917 860.353 741.380 860.597 741.693  c
860.842 742.005 861.204 742.162 861.683 742.162  c
862.267 742.162 862.728 741.977 863.066 741.607  c
863.405 741.237 863.574 740.729 863.574 740.083  c
863.574 736.365 l
864.652 736.365 l
864.652 742.927 l
863.574 742.927 l
863.574 741.912 l
863.314 742.318 863.012 742.617 862.668 742.810  c
862.324 743.003 861.923 743.099 861.465 743.099  c
860.704 743.099 860.129 742.865 859.738 742.396  c
859.347 741.927 859.152 741.240 859.152 740.333  c
h
871.195 737.365 m
871.195 733.802 l
872.273 733.802 l
872.273 742.927 l
871.195 742.927 l
871.195 741.943 l
870.966 742.328 870.680 742.617 870.336 742.810  c
869.992 743.003 869.575 743.099 869.086 743.099  c
868.294 743.099 867.648 742.781 867.148 742.146  c
866.648 741.511 866.398 740.677 866.398 739.646  c
866.398 738.615 866.648 737.784 867.148 737.154  c
867.648 736.524 868.294 736.208 869.086 736.208  c
869.575 736.208 869.992 736.302 870.336 736.490  c
870.680 736.677 870.966 736.969 871.195 737.365  c
h
867.523 739.646 m
867.523 740.438 867.685 741.060 868.008 741.513  c
868.331 741.966 868.778 742.193 869.351 742.193  c
869.924 742.193 870.375 741.966 870.703 741.513  c
871.031 741.060 871.195 740.438 871.195 739.646  c
871.195 738.854 871.031 738.235 870.703 737.787  c
870.375 737.339 869.924 737.115 869.351 737.115  c
868.778 737.115 868.331 737.339 868.008 737.787  c
867.685 738.235 867.523 738.854 867.523 739.646  c
h
880.109 739.380 m
880.109 739.896 l
875.140 739.896 l
875.193 740.646 875.419 741.214 875.820 741.599  c
876.221 741.985 876.776 742.177 877.484 742.177  c
877.901 742.177 878.305 742.128 878.695 742.029  c
879.086 741.930 879.474 741.776 879.859 741.568  c
879.859 742.599 l
879.463 742.755 879.062 742.878 878.656 742.966  c
878.250 743.055 877.838 743.099 877.422 743.099  c
876.380 743.099 875.552 742.794 874.937 742.185  c
874.323 741.576 874.015 740.750 874.015 739.708  c
874.015 738.636 874.307 737.784 874.890 737.154  c
875.474 736.524 876.255 736.208 877.234 736.208  c
878.120 736.208 878.820 736.492 879.336 737.060  c
879.851 737.628 880.109 738.401 880.109 739.380  c
h
879.031 739.052 m
879.021 738.469 878.854 738.000 878.531 737.646  c
878.208 737.292 877.781 737.115 877.250 737.115  c
876.646 737.115 876.164 737.287 875.805 737.630  c
875.445 737.974 875.239 738.453 875.187 739.068  c
879.031 739.052 l
h
886.055 736.552 m
886.055 737.583 l
885.752 737.427 885.437 737.310 885.109 737.232  c
884.781 737.154 884.440 737.115 884.086 737.115  c
883.555 737.115 883.153 737.195 882.883 737.357  c
882.612 737.518 882.476 737.766 882.476 738.099  c
882.476 738.349 882.573 738.544 882.765 738.685  c
882.958 738.826 883.346 738.958 883.930 739.083  c
884.289 739.177 l
885.060 739.333 885.607 739.563 885.930 739.865  c
886.252 740.167 886.414 740.583 886.414 741.115  c
886.414 741.729 886.172 742.214 885.687 742.568  c
885.203 742.922 884.539 743.099 883.695 743.099  c
883.341 743.099 882.974 743.065 882.594 742.998  c
882.213 742.930 881.815 742.828 881.398 742.693  c
881.398 741.568 l
881.794 741.776 882.185 741.932 882.570 742.037  c
882.956 742.141 883.341 742.193 883.726 742.193  c
884.226 742.193 884.614 742.107 884.890 741.935  c
885.166 741.763 885.305 741.516 885.305 741.193  c
885.305 740.901 885.206 740.677 885.008 740.521  c
884.810 740.365 884.377 740.214 883.711 740.068  c
883.336 739.990 l
882.669 739.844 882.187 739.625 881.890 739.333  c
881.594 739.042 881.445 738.646 881.445 738.146  c
881.445 737.521 881.664 737.042 882.101 736.708  c
882.539 736.375 883.159 736.208 883.961 736.208  c
884.357 736.208 884.732 736.237 885.086 736.294  c
885.440 736.352 885.763 736.438 886.055 736.552  c
h
894.918 739.630 m
894.053 739.630 893.452 739.729 893.113 739.927  c
892.775 740.125 892.605 740.464 892.605 740.943  c
892.605 741.328 892.733 741.633 892.988 741.857  c
893.243 742.081 893.584 742.193 894.012 742.193  c
894.616 742.193 895.097 741.982 895.457 741.560  c
895.816 741.138 895.996 740.573 895.996 739.865  c
895.996 739.630 l
894.918 739.630 l
h
897.074 739.177 m
897.074 742.927 l
895.996 742.927 l
895.996 741.927 l
895.746 742.323 895.439 742.617 895.074 742.810  c
894.709 743.003 894.262 743.099 893.730 743.099  c
893.053 743.099 892.517 742.909 892.121 742.529  c
891.725 742.149 891.527 741.646 891.527 741.021  c
891.527 740.281 891.775 739.724 892.269 739.349  c
892.764 738.974 893.501 738.787 894.480 738.787  c
895.996 738.787 l
895.996 738.677 l
895.996 738.177 895.832 737.792 895.504 737.521  c
895.176 737.250 894.720 737.115 894.137 737.115  c
893.762 737.115 893.394 737.162 893.035 737.255  c
892.676 737.349 892.334 737.485 892.012 737.662  c
892.012 736.662 l
892.407 736.505 892.790 736.391 893.160 736.318  c
893.530 736.245 893.892 736.208 894.246 736.208  c
895.194 736.208 895.902 736.453 896.371 736.943  c
896.840 737.432 897.074 738.177 897.074 739.177  c
h
904.756 738.958 m
904.756 742.927 l
903.678 742.927 l
903.678 739.005 l
903.678 738.380 903.555 737.914 903.310 737.607  c
903.066 737.300 902.704 737.146 902.224 737.146  c
901.641 737.146 901.180 737.331 900.842 737.701  c
900.503 738.070 900.334 738.578 900.334 739.224  c
900.334 742.927 l
899.256 742.927 l
899.256 736.365 l
900.334 736.365 l
900.334 737.380 l
900.594 736.985 900.899 736.690 901.248 736.498  c
901.597 736.305 902.000 736.208 902.459 736.208  c
903.209 736.208 903.779 736.440 904.170 736.904  c
904.560 737.367 904.756 738.052 904.756 738.958  c
h
916.332 739.380 m
916.332 739.896 l
911.363 739.896 l
911.415 740.646 911.642 741.214 912.043 741.599  c
912.444 741.985 912.999 742.177 913.707 742.177  c
914.124 742.177 914.527 742.128 914.918 742.029  c
915.308 741.930 915.696 741.776 916.082 741.568  c
916.082 742.599 l
915.686 742.755 915.285 742.878 914.879 742.966  c
914.472 743.055 914.061 743.099 913.644 743.099  c
912.603 743.099 911.775 742.794 911.160 742.185  c
910.545 741.576 910.238 740.750 910.238 739.708  c
910.238 738.636 910.530 737.784 911.113 737.154  c
911.696 736.524 912.478 736.208 913.457 736.208  c
914.342 736.208 915.043 736.492 915.558 737.060  c
916.074 737.628 916.332 738.401 916.332 739.380  c
h
915.254 739.052 m
915.243 738.469 915.077 738.000 914.754 737.646  c
914.431 737.292 914.004 737.115 913.472 737.115  c
912.868 737.115 912.387 737.287 912.027 737.630  c
911.668 737.974 911.462 738.453 911.410 739.068  c
915.254 739.052 l
h
923.199 737.630 m
923.470 737.141 923.793 736.781 924.168 736.552  c
924.543 736.323 924.985 736.208 925.496 736.208  c
926.183 736.208 926.712 736.448 927.082 736.927  c
927.452 737.406 927.637 738.083 927.637 738.958  c
927.637 742.927 l
926.558 742.927 l
926.558 739.005 l
926.558 738.370 926.446 737.901 926.222 737.599  c
925.999 737.297 925.657 737.146 925.199 737.146  c
924.637 737.146 924.194 737.331 923.871 737.701  c
923.548 738.070 923.387 738.578 923.387 739.224  c
923.387 742.927 l
922.308 742.927 l
922.308 739.005 l
922.308 738.370 922.196 737.901 921.972 737.599  c
921.749 737.297 921.402 737.146 920.933 737.146  c
920.381 737.146 919.944 737.331 919.621 737.701  c
919.298 738.070 919.137 738.578 919.137 739.224  c
919.137 742.927 l
918.058 742.927 l
918.058 736.365 l
919.137 736.365 l
919.137 737.380 l
919.387 736.985 919.683 736.690 920.027 736.498  c
920.371 736.305 920.777 736.208 921.246 736.208  c
921.725 736.208 922.131 736.328 922.465 736.568  c
922.798 736.807 923.043 737.162 923.199 737.630  c
h
932.763 739.630 m
931.899 739.630 931.297 739.729 930.959 739.927  c
930.620 740.125 930.451 740.464 930.451 740.943  c
930.451 741.328 930.579 741.633 930.834 741.857  c
931.089 742.081 931.430 742.193 931.857 742.193  c
932.461 742.193 932.943 741.982 933.303 741.560  c
933.662 741.138 933.842 740.573 933.842 739.865  c
933.842 739.630 l
932.763 739.630 l
h
934.920 739.177 m
934.920 742.927 l
933.842 742.927 l
933.842 741.927 l
933.592 742.323 933.284 742.617 932.920 742.810  c
932.555 743.003 932.107 743.099 931.576 743.099  c
930.899 743.099 930.362 742.909 929.967 742.529  c
929.571 742.149 929.373 741.646 929.373 741.021  c
929.373 740.281 929.620 739.724 930.115 739.349  c
930.610 738.974 931.347 738.787 932.326 738.787  c
933.842 738.787 l
933.842 738.677 l
933.842 738.177 933.678 737.792 933.349 737.521  c
933.021 737.250 932.566 737.115 931.982 737.115  c
931.607 737.115 931.240 737.162 930.881 737.255  c
930.521 737.349 930.180 737.485 929.857 737.662  c
929.857 736.662 l
930.253 736.505 930.636 736.391 931.006 736.318  c
931.375 736.245 931.737 736.208 932.092 736.208  c
933.040 736.208 933.748 736.453 934.217 736.943  c
934.685 737.432 934.920 738.177 934.920 739.177  c
h
937.133 736.365 m
938.211 736.365 l
938.211 742.927 l
937.133 742.927 l
937.133 736.365 l
h
937.133 733.802 m
938.211 733.802 l
938.211 735.177 l
937.133 735.177 l
937.133 733.802 l
h
940.467 733.802 m
941.545 733.802 l
941.545 742.927 l
940.467 742.927 l
940.467 733.802 l
h
f
2 J
10.0000 M
.752941 .752941 .752941 RG
0 J
1.45000 M
1.00000 1.00000 1.00000 RG
newpath
828.723 727.773 m
828.723 749.773 l
828.723 751.982 830.514 753.773 832.723 753.773  c
947.218 753.773 l
949.427 753.773 951.218 751.982 951.218 749.773  c
951.218 727.773 l
951.218 725.564 949.427 723.773 947.218 723.773  c
832.723 723.773 l
830.514 723.773 828.723 725.564 828.723 727.773  c
h
S
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
.752941 .752941 .752941 RG
newpath
963.923 685.939 m
963.923 707.939 l
963.923 710.148 965.714 711.939 967.923 711.939  c
1082.42 711.939 l
1084.63 711.939 1086.42 710.148 1086.42 707.939  c
1086.42 685.939 l
1086.42 683.729 1084.63 681.939 1082.42 681.939  c
967.923 681.939 l
965.714 681.939 963.923 683.729 963.923 685.939  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
994.274 691.968 m
995.352 691.968 l
995.352 701.093 l
994.274 701.093 l
994.274 691.968 l
h
1003.23 697.546 m
1003.23 698.062 l
998.264 698.062 l
998.316 698.812 998.543 699.379 998.944 699.765  c
999.345 700.150 999.900 700.343 1000.61 700.343  c
1001.02 700.343 1001.43 700.293 1001.82 700.194  c
1002.21 700.095 1002.60 699.942 1002.98 699.733  c
1002.98 700.765 l
1002.59 700.921 1002.19 701.043 1001.78 701.132  c
1001.37 701.220 1000.96 701.265 1000.55 701.265  c
999.504 701.265 998.676 700.960 998.061 700.351  c
997.447 699.741 997.139 698.916 997.139 697.874  c
997.139 696.801 997.431 695.950 998.014 695.319  c
998.598 694.689 999.379 694.374 1000.36 694.374  c
1001.24 694.374 1001.94 694.658 1002.46 695.226  c
1002.98 695.793 1003.23 696.567 1003.23 697.546  c
h
1002.15 697.218 m
1002.14 696.635 1001.98 696.166 1001.65 695.812  c
1001.33 695.457 1000.90 695.280 1000.37 695.280  c
999.769 695.280 999.288 695.452 998.928 695.796  c
998.569 696.140 998.363 696.619 998.311 697.233  c
1002.15 697.218 l
h
1010.46 697.124 m
1010.46 701.093 l
1009.38 701.093 l
1009.38 697.171 l
1009.38 696.546 1009.26 696.080 1009.01 695.773  c
1008.77 695.465 1008.41 695.312 1007.93 695.312  c
1007.34 695.312 1006.88 695.496 1006.55 695.866  c
1006.21 696.236 1006.04 696.744 1006.04 697.390  c
1006.04 701.093 l
1004.96 701.093 l
1004.96 694.530 l
1006.04 694.530 l
1006.04 695.546 l
1006.30 695.150 1006.60 694.856 1006.95 694.663  c
1007.30 694.470 1007.70 694.374 1008.16 694.374  c
1008.91 694.374 1009.48 694.606 1009.87 695.069  c
1010.26 695.533 1010.46 696.218 1010.46 697.124  c
h
1016.92 697.733 m
1016.92 696.952 1016.76 696.348 1016.44 695.921  c
1016.12 695.494 1015.66 695.280 1015.08 695.280  c
1014.51 695.280 1014.06 695.494 1013.74 695.921  c
1013.41 696.348 1013.25 696.952 1013.25 697.733  c
1013.25 698.515 1013.41 699.119 1013.74 699.546  c
1014.06 699.973 1014.51 700.187 1015.08 700.187  c
1015.66 700.187 1016.12 699.973 1016.44 699.546  c
1016.76 699.119 1016.92 698.515 1016.92 697.733  c
h
1018.00 700.280 m
1018.00 701.395 1017.76 702.226 1017.26 702.773  c
1016.77 703.319 1016.00 703.593 1014.97 703.593  c
1014.60 703.593 1014.24 703.564 1013.90 703.507  c
1013.56 703.450 1013.24 703.364 1012.92 703.249  c
1012.92 702.202 l
1013.24 702.369 1013.55 702.494 1013.86 702.577  c
1014.17 702.661 1014.49 702.702 1014.80 702.702  c
1015.51 702.702 1016.04 702.517 1016.39 702.148  c
1016.75 701.778 1016.92 701.218 1016.92 700.468  c
1016.92 699.937 l
1016.70 700.322 1016.41 700.611 1016.07 700.804  c
1015.72 700.996 1015.30 701.093 1014.82 701.093  c
1014.01 701.093 1013.36 700.786 1012.87 700.171  c
1012.37 699.556 1012.13 698.744 1012.13 697.733  c
1012.13 696.723 1012.37 695.911 1012.87 695.296  c
1013.36 694.681 1014.01 694.374 1014.82 694.374  c
1015.30 694.374 1015.72 694.470 1016.07 694.663  c
1016.41 694.856 1016.70 695.145 1016.92 695.530  c
1016.92 694.530 l
1018.00 694.530 l
1018.00 700.280 l
h
1021.29 692.671 m
1021.29 694.530 l
1023.51 694.530 l
1023.51 695.374 l
1021.29 695.374 l
1021.29 698.937 l
1021.29 699.468 1021.36 699.809 1021.51 699.960  c
1021.66 700.111 1021.95 700.187 1022.40 700.187  c
1023.51 700.187 l
1023.51 701.093 l
1022.40 701.093 l
1021.57 701.093 1020.99 700.937 1020.67 700.624  c
1020.36 700.312 1020.20 699.749 1020.20 698.937  c
1020.20 695.374 l
1019.42 695.374 l
1019.42 694.530 l
1020.20 694.530 l
1020.20 692.671 l
1021.29 692.671 l
h
1030.39 697.124 m
1030.39 701.093 l
1029.31 701.093 l
1029.31 697.171 l
1029.31 696.546 1029.19 696.080 1028.94 695.773  c
1028.70 695.465 1028.34 695.312 1027.86 695.312  c
1027.27 695.312 1026.81 695.496 1026.47 695.866  c
1026.13 696.236 1025.97 696.744 1025.97 697.390  c
1025.97 701.093 l
1024.89 701.093 l
1024.89 691.968 l
1025.97 691.968 l
1025.97 695.546 l
1026.23 695.150 1026.53 694.856 1026.88 694.663  c
1027.23 694.470 1027.63 694.374 1028.09 694.374  c
1028.84 694.374 1029.41 694.606 1029.80 695.069  c
1030.19 695.533 1030.39 696.218 1030.39 697.124  c
h
1038.89 695.280 m
1038.31 695.280 1037.86 695.507 1037.52 695.960  c
1037.18 696.413 1037.01 697.030 1037.01 697.812  c
1037.01 698.603 1037.18 699.223 1037.51 699.671  c
1037.84 700.119 1038.30 700.343 1038.89 700.343  c
1039.46 700.343 1039.91 700.116 1040.25 699.663  c
1040.59 699.210 1040.76 698.593 1040.76 697.812  c
1040.76 697.041 1040.59 696.426 1040.25 695.968  c
1039.91 695.510 1039.46 695.280 1038.89 695.280  c
h
1038.89 694.374 m
1039.82 694.374 1040.56 694.679 1041.10 695.288  c
1041.63 695.898 1041.90 696.739 1041.90 697.812  c
1041.90 698.885 1041.63 699.728 1041.10 700.343  c
1040.56 700.957 1039.82 701.265 1038.89 701.265  c
1037.95 701.265 1037.21 700.957 1036.67 700.343  c
1036.14 699.728 1035.87 698.885 1035.87 697.812  c
1035.87 696.739 1036.14 695.898 1036.67 695.288  c
1037.21 694.679 1037.95 694.374 1038.89 694.374  c
h
1047.01 691.968 m
1047.01 692.874 l
1045.98 692.874 l
1045.59 692.874 1045.32 692.952 1045.17 693.108  c
1045.02 693.265 1044.95 693.546 1044.95 693.952  c
1044.95 694.530 l
1046.73 694.530 l
1046.73 695.374 l
1044.95 695.374 l
1044.95 701.093 l
1043.87 701.093 l
1043.87 695.374 l
1042.84 695.374 l
1042.84 694.530 l
1043.87 694.530 l
1043.87 694.077 l
1043.87 693.348 1044.04 692.814 1044.38 692.476  c
1044.71 692.137 1045.25 691.968 1045.99 691.968  c
1047.01 691.968 l
h
1056.45 694.780 m
1056.45 695.796 l
1056.14 695.619 1055.83 695.489 1055.53 695.405  c
1055.23 695.322 1054.92 695.280 1054.61 695.280  c
1053.90 695.280 1053.35 695.502 1052.97 695.944  c
1052.58 696.387 1052.39 697.010 1052.39 697.812  c
1052.39 698.614 1052.58 699.236 1052.97 699.679  c
1053.35 700.121 1053.90 700.343 1054.61 700.343  c
1054.92 700.343 1055.23 700.301 1055.53 700.218  c
1055.83 700.135 1056.14 700.010 1056.45 699.843  c
1056.45 700.843 l
1056.15 700.978 1055.84 701.082 1055.52 701.155  c
1055.19 701.228 1054.85 701.265 1054.48 701.265  c
1053.50 701.265 1052.71 700.955 1052.13 700.335  c
1051.54 699.715 1051.25 698.874 1051.25 697.812  c
1051.25 696.749 1051.54 695.911 1052.13 695.296  c
1052.72 694.681 1053.53 694.374 1054.56 694.374  c
1054.89 694.374 1055.21 694.408 1055.52 694.476  c
1055.84 694.543 1056.15 694.645 1056.45 694.780  c
h
f
2 J
10.0000 M
.752941 .752941 .752941 RG
0 J
1.45000 M
1.00000 1.00000 1.00000 RG
newpath
963.923 685.939 m
963.923 707.939 l
963.923 710.148 965.714 711.939 967.923 711.939  c
1082.42 711.939 l
1084.63 711.939 1086.42 710.148 1086.42 707.939  c
1086.42 685.939 l
1086.42 683.729 1084.63 681.939 1082.42 681.939  c
967.923 681.939 l
965.714 681.939 963.923 683.729 963.923 685.939  c
h
S
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
