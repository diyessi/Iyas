%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 439 335
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Sunday, February 15, 2015 6:45:03 PM AST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
439 335 setpagesize
0 0 0 0 setmargins
0 0 setorigin
439 335 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
439.000 0.00000 l
439.000 335.000 l
0.00000 335.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 439 335 rc
q
[ 1.95312 0.00000 0.00000 1.95312 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -881.000 -655.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
881.000 655.000 m
1106.00 655.000 l
1106.00 827.000 l
881.000 827.000 l
881.000 655.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.95312 0.00000 0.00000 1.95312 -1720.70 -1279.30 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.95312 0.00000 0.00000 1.95312 -1720.70 -1279.30 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.95312 0.00000 0.00000 1.95312 -1720.70 -1279.30 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
901.523 685.939 m
901.523 707.939 l
901.523 710.148 903.314 711.939 905.523 711.939  c
1062.42 711.939 l
1064.63 711.939 1066.42 710.148 1066.42 707.939  c
1066.42 685.939 l
1066.42 683.729 1064.63 681.939 1062.42 681.939  c
905.523 681.939 l
903.314 681.939 901.523 683.729 901.523 685.939  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
916.342 691.968 m
918.826 691.968 l
918.826 692.812 l
917.420 692.812 l
917.420 701.843 l
918.826 701.843 l
918.826 702.671 l
916.342 702.671 l
916.342 691.968 l
h
923.805 696.937 m
923.242 696.937 922.799 697.088 922.476 697.390  c
922.153 697.692 921.992 698.103 921.992 698.624  c
921.992 699.155 922.153 699.572 922.476 699.874  c
922.799 700.176 923.242 700.327 923.805 700.327  c
924.367 700.327 924.810 700.176 925.133 699.874  c
925.456 699.572 925.617 699.155 925.617 698.624  c
925.617 698.103 925.458 697.692 925.140 697.390  c
924.823 697.088 924.377 696.937 923.805 696.937  c
h
922.617 696.437 m
922.117 696.312 921.724 696.075 921.437 695.726  c
921.151 695.377 921.008 694.952 921.008 694.452  c
921.008 693.754 921.258 693.202 921.758 692.796  c
922.258 692.390 922.940 692.187 923.805 692.187  c
924.680 692.187 925.364 692.390 925.859 692.796  c
926.354 693.202 926.601 693.754 926.601 694.452  c
926.601 694.952 926.461 695.377 926.180 695.726  c
925.898 696.075 925.502 696.312 924.992 696.437  c
925.565 696.572 926.010 696.832 926.328 697.218  c
926.646 697.603 926.805 698.072 926.805 698.624  c
926.805 699.478 926.547 700.132 926.031 700.585  c
925.515 701.038 924.773 701.265 923.805 701.265  c
922.846 701.265 922.107 701.038 921.586 700.585  c
921.065 700.132 920.805 699.478 920.805 698.624  c
920.805 698.072 920.966 697.603 921.289 697.218  c
921.612 696.832 922.055 696.572 922.617 696.437  c
h
922.195 694.562 m
922.195 695.020 922.336 695.374 922.617 695.624  c
922.898 695.874 923.294 695.999 923.805 695.999  c
924.315 695.999 924.713 695.874 925.000 695.624  c
925.286 695.374 925.430 695.020 925.430 694.562  c
925.430 694.114 925.286 693.762 925.000 693.507  c
924.713 693.252 924.315 693.124 923.805 693.124  c
923.294 693.124 922.898 693.252 922.617 693.507  c
922.336 693.762 922.195 694.114 922.195 694.562  c
h
931.439 693.124 m
930.835 693.124 930.379 693.424 930.072 694.023  c
929.765 694.621 929.611 695.525 929.611 696.733  c
929.611 697.931 929.765 698.830 930.072 699.429  c
930.379 700.028 930.835 700.327 931.439 700.327  c
932.054 700.327 932.515 700.028 932.822 699.429  c
933.129 698.830 933.283 697.931 933.283 696.733  c
933.283 695.525 933.129 694.621 932.822 694.023  c
932.515 693.424 932.054 693.124 931.439 693.124  c
h
931.439 692.187 m
932.418 692.187 933.168 692.575 933.689 693.351  c
934.210 694.127 934.471 695.254 934.471 696.733  c
934.471 698.202 934.210 699.325 933.689 700.101  c
933.168 700.877 932.418 701.265 931.439 701.265  c
930.460 701.265 929.713 700.877 929.197 700.101  c
928.681 699.325 928.424 698.202 928.424 696.733  c
928.424 695.254 928.681 694.127 929.197 693.351  c
929.713 692.575 930.460 692.187 931.439 692.187  c
h
936.668 699.608 m
937.902 699.608 l
937.902 700.608 l
936.949 702.483 l
936.183 702.483 l
936.668 700.608 l
936.668 699.608 l
h
944.375 700.093 m
946.312 700.093 l
946.312 693.421 l
944.203 693.843 l
944.203 692.765 l
946.297 692.343 l
947.484 692.343 l
947.484 700.093 l
949.422 700.093 l
949.422 701.093 l
944.375 701.093 l
944.375 700.093 l
h
954.338 693.124 m
953.734 693.124 953.278 693.424 952.971 694.023  c
952.663 694.621 952.510 695.525 952.510 696.733  c
952.510 697.931 952.663 698.830 952.971 699.429  c
953.278 700.028 953.734 700.327 954.338 700.327  c
954.952 700.327 955.413 700.028 955.721 699.429  c
956.028 698.830 956.181 697.931 956.181 696.733  c
956.181 695.525 956.028 694.621 955.721 694.023  c
955.413 693.424 954.952 693.124 954.338 693.124  c
h
954.338 692.187 m
955.317 692.187 956.067 692.575 956.588 693.351  c
957.109 694.127 957.369 695.254 957.369 696.733  c
957.369 698.202 957.109 699.325 956.588 700.101  c
956.067 700.877 955.317 701.265 954.338 701.265  c
953.359 701.265 952.611 700.877 952.096 700.101  c
951.580 699.325 951.322 698.202 951.322 696.733  c
951.322 695.254 951.580 694.127 952.096 693.351  c
952.611 692.575 953.359 692.187 954.338 692.187  c
h
961.972 693.124 m
961.368 693.124 960.913 693.424 960.605 694.023  c
960.298 694.621 960.144 695.525 960.144 696.733  c
960.144 697.931 960.298 698.830 960.605 699.429  c
960.913 700.028 961.368 700.327 961.972 700.327  c
962.587 700.327 963.048 700.028 963.355 699.429  c
963.663 698.830 963.816 697.931 963.816 696.733  c
963.816 695.525 963.663 694.621 963.355 694.023  c
963.048 693.424 962.587 693.124 961.972 693.124  c
h
961.972 692.187 m
962.952 692.187 963.702 692.575 964.222 693.351  c
964.743 694.127 965.004 695.254 965.004 696.733  c
965.004 698.202 964.743 699.325 964.222 700.101  c
963.702 700.877 962.952 701.265 961.972 701.265  c
960.993 701.265 960.246 700.877 959.730 700.101  c
959.215 699.325 958.957 698.202 958.957 696.733  c
958.957 695.254 959.215 694.127 959.730 693.351  c
960.246 692.575 960.993 692.187 961.972 692.187  c
h
969.451 691.968 m
969.451 702.671 l
966.967 702.671 l
966.967 701.843 l
968.357 701.843 l
968.357 692.812 l
966.967 692.812 l
966.967 691.968 l
969.451 691.968 l
h
979.195 697.249 m
978.862 697.249 978.599 697.392 978.406 697.679  c
978.213 697.965 978.117 698.369 978.117 698.890  c
978.117 699.390 978.213 699.786 978.406 700.077  c
978.599 700.369 978.862 700.515 979.195 700.515  c
979.528 700.515 979.791 700.369 979.984 700.077  c
980.177 699.786 980.273 699.390 980.273 698.890  c
980.273 698.369 980.177 697.965 979.984 697.679  c
979.791 697.392 979.528 697.249 979.195 697.249  c
h
979.195 696.499 m
979.820 696.499 980.312 696.713 980.672 697.140  c
981.031 697.567 981.211 698.150 981.211 698.890  c
981.211 699.619 981.028 700.197 980.664 700.624  c
980.299 701.051 979.810 701.265 979.195 701.265  c
978.570 701.265 978.078 701.051 977.719 700.624  c
977.359 700.197 977.180 699.619 977.180 698.890  c
977.180 698.150 977.362 697.567 977.726 697.140  c
978.091 696.713 978.581 696.499 979.195 696.499  c
h
973.148 692.937 m
972.815 692.937 972.552 693.080 972.359 693.366  c
972.166 693.653 972.070 694.051 972.070 694.562  c
972.070 695.082 972.166 695.486 972.359 695.773  c
972.552 696.059 972.815 696.202 973.148 696.202  c
973.492 696.202 973.760 696.059 973.953 695.773  c
974.146 695.486 974.242 695.082 974.242 694.562  c
974.242 694.062 974.146 693.666 973.953 693.374  c
973.760 693.082 973.492 692.937 973.148 692.937  c
h
978.445 692.187 m
979.383 692.187 l
973.914 701.265 l
972.976 701.265 l
978.445 692.187 l
h
973.148 692.187 m
973.773 692.187 974.268 692.400 974.633 692.827  c
974.997 693.254 975.180 693.832 975.180 694.562  c
975.180 695.301 974.997 695.885 974.633 696.312  c
974.268 696.739 973.773 696.952 973.148 696.952  c
972.534 696.952 972.044 696.739 971.680 696.312  c
971.315 695.885 971.133 695.301 971.133 694.562  c
971.133 693.832 971.315 693.254 971.680 692.827  c
972.044 692.400 972.534 692.187 973.148 692.187  c
h
986.287 697.327 m
989.443 697.327 l
989.443 698.280 l
986.287 698.280 l
986.287 697.327 l
h
990.617 697.327 m
993.773 697.327 l
993.773 698.280 l
990.617 698.280 l
990.617 697.327 l
h
995.619 695.187 m
995.619 694.124 l
1003.13 696.843 l
1003.13 697.812 l
995.619 700.546 l
995.619 699.468 l
1001.67 697.343 l
995.619 695.187 l
h
1010.58 693.312 m
1010.58 700.124 l
1012.02 700.124 l
1013.23 700.124 1014.11 699.851 1014.67 699.304  c
1015.23 698.757 1015.50 697.890 1015.50 696.702  c
1015.50 695.536 1015.23 694.679 1014.67 694.132  c
1014.11 693.585 1013.23 693.312 1012.02 693.312  c
1010.58 693.312 l
h
1009.39 692.343 m
1011.83 692.343 l
1013.53 692.343 1014.77 692.694 1015.57 693.398  c
1016.36 694.101 1016.75 695.202 1016.75 696.702  c
1016.75 698.213 1016.36 699.322 1015.56 700.030  c
1014.76 700.739 1013.52 701.093 1011.83 701.093  c
1009.39 701.093 l
1009.39 692.343 l
h
1018.63 692.343 m
1019.82 692.343 l
1019.82 701.093 l
1018.63 701.093 l
1018.63 692.343 l
h
1026.33 696.983 m
1026.58 697.077 1026.82 697.265 1027.06 697.546  c
1027.30 697.827 1027.55 698.213 1027.80 698.702  c
1029.00 701.093 l
1027.72 701.093 l
1026.61 698.843 l
1026.32 698.260 1026.04 697.871 1025.77 697.679  c
1025.50 697.486 1025.13 697.390 1024.66 697.390  c
1023.36 697.390 l
1023.36 701.093 l
1022.17 701.093 l
1022.17 692.343 l
1024.85 692.343 l
1025.85 692.343 1026.59 692.551 1027.09 692.968  c
1027.58 693.385 1027.83 694.015 1027.83 694.858  c
1027.83 695.411 1027.70 695.869 1027.45 696.233  c
1027.19 696.598 1026.82 696.848 1026.33 696.983  c
h
1023.36 693.312 m
1023.36 696.421 l
1024.85 696.421 l
1025.42 696.421 1025.85 696.288 1026.14 696.023  c
1026.43 695.757 1026.58 695.369 1026.58 694.858  c
1026.58 694.348 1026.43 693.963 1026.14 693.702  c
1025.85 693.442 1025.42 693.312 1024.85 693.312  c
1023.36 693.312 l
h
1030.51 692.343 m
1036.04 692.343 l
1036.04 693.343 l
1031.70 693.343 l
1031.70 695.937 l
1035.87 695.937 l
1035.87 696.921 l
1031.70 696.921 l
1031.70 700.093 l
1036.15 700.093 l
1036.15 701.093 l
1030.51 701.093 l
1030.51 692.343 l
h
1044.66 693.015 m
1044.66 694.265 l
1044.25 693.890 1043.82 693.611 1043.37 693.429  c
1042.93 693.246 1042.45 693.155 1041.94 693.155  c
1040.94 693.155 1040.17 693.463 1039.64 694.077  c
1039.11 694.692 1038.84 695.577 1038.84 696.733  c
1038.84 697.879 1039.11 698.760 1039.64 699.374  c
1040.17 699.989 1040.94 700.296 1041.94 700.296  c
1042.45 700.296 1042.93 700.202 1043.37 700.015  c
1043.82 699.827 1044.25 699.551 1044.66 699.187  c
1044.66 700.421 l
1044.24 700.702 1043.80 700.913 1043.34 701.054  c
1042.87 701.194 1042.39 701.265 1041.87 701.265  c
1040.54 701.265 1039.49 700.858 1038.73 700.046  c
1037.97 699.233 1037.59 698.129 1037.59 696.733  c
1037.59 695.327 1037.97 694.218 1038.73 693.405  c
1039.49 692.593 1040.54 692.187 1041.87 692.187  c
1042.40 692.187 1042.89 692.257 1043.35 692.398  c
1043.81 692.538 1044.25 692.744 1044.66 693.015  c
h
1045.27 692.343 m
1052.66 692.343 l
1052.66 693.343 l
1049.57 693.343 l
1049.57 701.093 l
1048.38 701.093 l
1048.38 693.343 l
1045.27 693.343 l
1045.27 692.343 l
h
f
2 J
10.0000 M
.752941 .752941 .752941 RG
0 J
1.45000 M
1.00000 1.00000 1.00000 RG
newpath
901.523 685.939 m
901.523 707.939 l
901.523 710.148 903.314 711.939 905.523 711.939  c
1062.42 711.939 l
1064.63 711.939 1066.42 710.148 1066.42 707.939  c
1066.42 685.939 l
1066.42 683.729 1064.63 681.939 1062.42 681.939  c
905.523 681.939 l
903.314 681.939 901.523 683.729 901.523 685.939  c
h
S
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
.752941 .752941 .752941 RG
newpath
901.523 723.293 m
901.523 745.293 l
901.523 747.502 903.314 749.293 905.523 749.293  c
1062.42 749.293 l
1064.63 749.293 1066.42 747.502 1066.42 745.293  c
1066.42 723.293 l
1066.42 721.084 1064.63 719.293 1062.42 719.293  c
905.523 719.293 l
903.314 719.293 901.523 721.084 901.523 723.293  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
919.474 729.338 m
918.954 730.234 918.566 731.122 918.310 732.002  c
918.055 732.882 917.928 733.775 917.928 734.682  c
917.928 735.577 918.055 736.468 918.310 737.354  c
918.566 738.239 918.954 739.130 919.474 740.025  c
918.537 740.025 l
917.954 739.109 917.516 738.208 917.224 737.322  c
916.933 736.437 916.787 735.557 916.787 734.682  c
916.787 733.807 916.933 732.929 917.224 732.049  c
917.516 731.169 917.954 730.265 918.537 729.338  c
919.474 729.338 l
h
922.734 737.447 m
926.875 737.447 l
926.875 738.447 l
921.312 738.447 l
921.312 737.447 l
921.760 736.989 922.372 736.367 923.148 735.580  c
923.924 734.794 924.411 734.286 924.609 734.057  c
924.995 733.640 925.263 733.283 925.414 732.986  c
925.565 732.689 925.640 732.400 925.640 732.119  c
925.640 731.650 925.476 731.270 925.148 730.979  c
924.820 730.687 924.396 730.541 923.875 730.541  c
923.500 730.541 923.107 730.604 922.695 730.729  c
922.284 730.854 921.844 731.051 921.375 731.322  c
921.375 730.119 l
921.854 729.932 922.299 729.788 922.711 729.689  c
923.122 729.590 923.500 729.541 923.844 729.541  c
924.750 729.541 925.474 729.768 926.015 730.221  c
926.557 730.674 926.828 731.281 926.828 732.041  c
926.828 732.395 926.760 732.734 926.625 733.057  c
926.489 733.380 926.245 733.760 925.890 734.197  c
925.786 734.312 925.474 734.640 924.953 735.182  c
924.432 735.723 923.693 736.479 922.734 737.447  c
h
931.885 730.479 m
931.280 730.479 930.825 730.778 930.517 731.377  c
930.210 731.976 930.056 732.880 930.056 734.088  c
930.056 735.286 930.210 736.184 930.517 736.783  c
930.825 737.382 931.280 737.682 931.885 737.682  c
932.499 737.682 932.960 737.382 933.267 736.783  c
933.575 736.184 933.728 735.286 933.728 734.088  c
933.728 732.880 933.575 731.976 933.267 731.377  c
932.960 730.778 932.499 730.479 931.885 730.479  c
h
931.885 729.541 m
932.864 729.541 933.614 729.929 934.135 730.705  c
934.655 731.481 934.916 732.609 934.916 734.088  c
934.916 735.557 934.655 736.679 934.135 737.455  c
933.614 738.231 932.864 738.619 931.885 738.619  c
930.905 738.619 930.158 738.231 929.642 737.455  c
929.127 736.679 928.869 735.557 928.869 734.088  c
928.869 732.609 929.127 731.481 929.642 730.705  c
930.158 729.929 930.905 729.541 931.885 729.541  c
h
937.113 736.963 m
938.347 736.963 l
938.347 737.963 l
937.394 739.838 l
936.629 739.838 l
937.113 737.963 l
937.113 736.963 l
h
943.334 734.291 m
942.771 734.291 942.329 734.442 942.006 734.744  c
941.683 735.046 941.521 735.458 941.521 735.979  c
941.521 736.510 941.683 736.926 942.006 737.229  c
942.329 737.531 942.771 737.682 943.334 737.682  c
943.896 737.682 944.339 737.531 944.662 737.229  c
944.985 736.926 945.146 736.510 945.146 735.979  c
945.146 735.458 944.987 735.046 944.670 734.744  c
944.352 734.442 943.907 734.291 943.334 734.291  c
h
942.146 733.791 m
941.646 733.666 941.253 733.429 940.967 733.080  c
940.680 732.731 940.537 732.307 940.537 731.807  c
940.537 731.109 940.787 730.557 941.287 730.150  c
941.787 729.744 942.469 729.541 943.334 729.541  c
944.209 729.541 944.894 729.744 945.388 730.150  c
945.883 730.557 946.131 731.109 946.131 731.807  c
946.131 732.307 945.990 732.731 945.709 733.080  c
945.428 733.429 945.032 733.666 944.521 733.791  c
945.094 733.926 945.540 734.187 945.857 734.572  c
946.175 734.958 946.334 735.426 946.334 735.979  c
946.334 736.833 946.076 737.486 945.560 737.939  c
945.045 738.393 944.303 738.619 943.334 738.619  c
942.375 738.619 941.636 738.393 941.115 737.939  c
940.594 737.486 940.334 736.833 940.334 735.979  c
940.334 735.426 940.495 734.958 940.818 734.572  c
941.141 734.187 941.584 733.926 942.146 733.791  c
h
941.724 731.916 m
941.724 732.374 941.865 732.729 942.146 732.979  c
942.428 733.229 942.823 733.354 943.334 733.354  c
943.844 733.354 944.243 733.229 944.529 732.979  c
944.816 732.729 944.959 732.374 944.959 731.916  c
944.959 731.468 944.816 731.117 944.529 730.861  c
944.243 730.606 943.844 730.479 943.334 730.479  c
942.823 730.479 942.428 730.606 942.146 730.861  c
941.865 731.117 941.724 731.468 941.724 731.916  c
h
950.969 730.479 m
950.364 730.479 949.909 730.778 949.601 731.377  c
949.294 731.976 949.140 732.880 949.140 734.088  c
949.140 735.286 949.294 736.184 949.601 736.783  c
949.909 737.382 950.364 737.682 950.969 737.682  c
951.583 737.682 952.044 737.382 952.351 736.783  c
952.659 736.184 952.812 735.286 952.812 734.088  c
952.812 732.880 952.659 731.976 952.351 731.377  c
952.044 730.778 951.583 730.479 950.969 730.479  c
h
950.969 729.541 m
951.948 729.541 952.698 729.929 953.219 730.705  c
953.739 731.481 954.000 732.609 954.000 734.088  c
954.000 735.557 953.739 736.679 953.219 737.455  c
952.698 738.231 951.948 738.619 950.969 738.619  c
949.989 738.619 949.242 738.231 948.726 737.455  c
948.211 736.679 947.953 735.557 947.953 734.088  c
947.953 732.609 948.211 731.481 948.726 730.705  c
949.242 729.929 949.989 729.541 950.969 729.541  c
h
955.760 729.338 m
956.697 729.338 l
957.280 730.265 957.718 731.169 958.010 732.049  c
958.301 732.929 958.447 733.807 958.447 734.682  c
958.447 735.557 958.301 736.437 958.010 737.322  c
957.718 738.208 957.280 739.109 956.697 740.025  c
955.760 740.025 l
956.270 739.130 956.655 738.239 956.916 737.354  c
957.176 736.468 957.306 735.577 957.306 734.682  c
957.306 733.775 957.176 732.882 956.916 732.002  c
956.655 731.122 956.270 730.234 955.760 729.338  c
h
968.191 734.604 m
967.858 734.604 967.595 734.747 967.402 735.033  c
967.209 735.320 967.113 735.723 967.113 736.244  c
967.113 736.744 967.209 737.140 967.402 737.432  c
967.595 737.723 967.858 737.869 968.191 737.869  c
968.525 737.869 968.788 737.723 968.980 737.432  c
969.173 737.140 969.269 736.744 969.269 736.244  c
969.269 735.723 969.173 735.320 968.980 735.033  c
968.788 734.747 968.525 734.604 968.191 734.604  c
h
968.191 733.854 m
968.816 733.854 969.308 734.067 969.668 734.494  c
970.027 734.921 970.207 735.505 970.207 736.244  c
970.207 736.973 970.025 737.551 969.660 737.979  c
969.295 738.406 968.806 738.619 968.191 738.619  c
967.566 738.619 967.074 738.406 966.715 737.979  c
966.355 737.551 966.176 736.973 966.176 736.244  c
966.176 735.505 966.358 734.921 966.722 734.494  c
967.087 734.067 967.577 733.854 968.191 733.854  c
h
962.144 730.291 m
961.811 730.291 961.548 730.434 961.355 730.721  c
961.163 731.007 961.066 731.406 961.066 731.916  c
961.066 732.437 961.163 732.840 961.355 733.127  c
961.548 733.413 961.811 733.557 962.144 733.557  c
962.488 733.557 962.756 733.413 962.949 733.127  c
963.142 732.840 963.238 732.437 963.238 731.916  c
963.238 731.416 963.142 731.020 962.949 730.729  c
962.756 730.437 962.488 730.291 962.144 730.291  c
h
967.441 729.541 m
968.379 729.541 l
962.910 738.619 l
961.972 738.619 l
967.441 729.541 l
h
962.144 729.541 m
962.769 729.541 963.264 729.755 963.629 730.182  c
963.993 730.609 964.176 731.187 964.176 731.916  c
964.176 732.656 963.993 733.239 963.629 733.666  c
963.264 734.093 962.769 734.307 962.144 734.307  c
961.530 734.307 961.040 734.093 960.676 733.666  c
960.311 733.239 960.129 732.656 960.129 731.916  c
960.129 731.187 960.311 730.609 960.676 730.182  c
961.040 729.755 961.530 729.541 962.144 729.541  c
h
975.283 734.682 m
978.439 734.682 l
978.439 735.635 l
975.283 735.635 l
975.283 734.682 l
h
979.613 734.682 m
982.769 734.682 l
982.769 735.635 l
979.613 735.635 l
979.613 734.682 l
h
984.615 732.541 m
984.615 731.479 l
992.131 734.197 l
992.131 735.166 l
984.615 737.900 l
984.615 736.822 l
990.662 734.697 l
984.615 732.541 l
h
1002.55 734.338 m
1002.80 734.432 1003.04 734.619 1003.28 734.900  c
1003.52 735.182 1003.77 735.567 1004.02 736.057  c
1005.22 738.447 l
1003.94 738.447 l
1002.83 736.197 l
1002.54 735.614 1002.26 735.226 1001.98 735.033  c
1001.71 734.840 1001.34 734.744 1000.87 734.744  c
999.578 734.744 l
999.578 738.447 l
998.390 738.447 l
998.390 729.697 l
1001.06 729.697 l
1002.06 729.697 1002.81 729.906 1003.30 730.322  c
1003.80 730.739 1004.05 731.369 1004.05 732.213  c
1004.05 732.765 1003.92 733.223 1003.66 733.588  c
1003.41 733.952 1003.04 734.202 1002.55 734.338  c
h
999.578 730.666 m
999.578 733.775 l
1001.06 733.775 l
1001.64 733.775 1002.07 733.643 1002.36 733.377  c
1002.65 733.111 1002.80 732.723 1002.80 732.213  c
1002.80 731.702 1002.65 731.317 1002.36 731.057  c
1002.07 730.796 1001.64 730.666 1001.06 730.666  c
999.578 730.666 l
h
1006.73 729.697 m
1012.26 729.697 l
1012.26 730.697 l
1007.92 730.697 l
1007.92 733.291 l
1012.09 733.291 l
1012.09 734.275 l
1007.92 734.275 l
1007.92 737.447 l
1012.37 737.447 l
1012.37 738.447 l
1006.73 738.447 l
1006.73 729.697 l
h
1014.31 729.697 m
1015.50 729.697 l
1015.50 737.447 l
1019.76 737.447 l
1019.76 738.447 l
1014.31 738.447 l
1014.31 729.697 l
h
1023.93 730.869 m
1022.32 735.213 l
1025.54 735.213 l
1023.93 730.869 l
h
1023.26 729.697 m
1024.61 729.697 l
1027.93 738.447 l
1026.70 738.447 l
1025.90 736.197 l
1021.96 736.197 l
1021.17 738.447 l
1019.92 738.447 l
1023.26 729.697 l
h
1028.00 729.697 m
1035.39 729.697 l
1035.39 730.697 l
1032.30 730.697 l
1032.30 738.447 l
1031.11 738.447 l
1031.11 730.697 l
1028.00 730.697 l
1028.00 729.697 l
h
1036.53 729.697 m
1042.07 729.697 l
1042.07 730.697 l
1037.72 730.697 l
1037.72 733.291 l
1041.89 733.291 l
1041.89 734.275 l
1037.72 734.275 l
1037.72 737.447 l
1042.18 737.447 l
1042.18 738.447 l
1036.53 738.447 l
1036.53 729.697 l
h
1045.30 730.666 m
1045.30 737.479 l
1046.74 737.479 l
1047.95 737.479 1048.83 737.205 1049.39 736.658  c
1049.95 736.111 1050.23 735.244 1050.23 734.057  c
1050.23 732.890 1049.95 732.033 1049.39 731.486  c
1048.83 730.939 1047.95 730.666 1046.74 730.666  c
1045.30 730.666 l
h
1044.12 729.697 m
1046.55 729.697 l
1048.25 729.697 1049.50 730.049 1050.29 730.752  c
1051.08 731.455 1051.48 732.557 1051.48 734.057  c
1051.48 735.567 1051.08 736.676 1050.28 737.385  c
1049.48 738.093 1048.24 738.447 1046.55 738.447  c
1044.12 738.447 l
1044.12 729.697 l
h
f
2 J
10.0000 M
.752941 .752941 .752941 RG
0 J
1.45000 M
1.00000 1.00000 1.00000 RG
newpath
901.523 723.293 m
901.523 745.293 l
901.523 747.502 903.314 749.293 905.523 749.293  c
1062.42 749.293 l
1064.63 749.293 1066.42 747.502 1066.42 745.293  c
1066.42 723.293 l
1066.42 721.084 1064.63 719.293 1062.42 719.293  c
905.523 719.293 l
903.314 719.293 901.523 721.084 901.523 723.293  c
h
S
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
.752941 .752941 .752941 RG
newpath
901.523 760.647 m
901.523 782.647 l
901.523 784.857 903.314 786.647 905.523 786.647  c
1062.42 786.647 l
1064.63 786.647 1066.42 784.857 1066.42 782.647  c
1066.42 760.647 l
1066.42 758.438 1064.63 756.647 1062.42 756.647  c
905.523 756.647 l
903.314 756.647 901.523 758.438 901.523 760.647  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
910.693 766.677 m
913.178 766.677 l
913.178 767.520 l
911.771 767.520 l
911.771 776.552 l
913.178 776.552 l
913.178 777.380 l
910.693 777.380 l
910.693 766.677 l
h
918.156 767.833 m
917.552 767.833 917.096 768.132 916.789 768.731  c
916.482 769.330 916.328 770.234 916.328 771.442  c
916.328 772.640 916.482 773.539 916.789 774.138  c
917.096 774.737 917.552 775.036 918.156 775.036  c
918.771 775.036 919.232 774.737 919.539 774.138  c
919.846 773.539 920.000 772.640 920.000 771.442  c
920.000 770.234 919.846 769.330 919.539 768.731  c
919.232 768.132 918.771 767.833 918.156 767.833  c
h
918.156 766.895 m
919.135 766.895 919.885 767.283 920.406 768.060  c
920.927 768.836 921.187 769.963 921.187 771.442  c
921.187 772.911 920.927 774.033 920.406 774.810  c
919.885 775.586 919.135 775.974 918.156 775.974  c
917.177 775.974 916.430 775.586 915.914 774.810  c
915.398 774.033 915.140 772.911 915.140 771.442  c
915.140 769.963 915.398 768.836 915.914 768.060  c
916.430 767.283 917.177 766.895 918.156 766.895  c
h
923.385 774.317 m
924.619 774.317 l
924.619 775.317 l
923.666 777.192 l
922.900 777.192 l
923.385 775.317 l
923.385 774.317 l
h
928.090 774.802 m
932.230 774.802 l
932.230 775.802 l
926.668 775.802 l
926.668 774.802 l
927.116 774.343 927.728 773.721 928.504 772.935  c
929.280 772.148 929.767 771.640 929.965 771.411  c
930.350 770.994 930.618 770.638 930.769 770.341  c
930.920 770.044 930.996 769.755 930.996 769.474  c
930.996 769.005 930.832 768.625 930.504 768.333  c
930.176 768.041 929.751 767.895 929.230 767.895  c
928.855 767.895 928.462 767.958 928.051 768.083  c
927.639 768.208 927.199 768.406 926.730 768.677  c
926.730 767.474 l
927.209 767.286 927.655 767.143 928.066 767.044  c
928.478 766.945 928.855 766.895 929.199 766.895  c
930.105 766.895 930.829 767.122 931.371 767.575  c
931.913 768.028 932.183 768.635 932.183 769.395  c
932.183 769.750 932.116 770.088 931.980 770.411  c
931.845 770.734 931.600 771.114 931.246 771.552  c
931.142 771.666 930.829 771.994 930.308 772.536  c
929.788 773.078 929.048 773.833 928.090 774.802  c
h
937.240 767.833 m
936.636 767.833 936.180 768.132 935.873 768.731  c
935.566 769.330 935.412 770.234 935.412 771.442  c
935.412 772.640 935.566 773.539 935.873 774.138  c
936.180 774.737 936.636 775.036 937.240 775.036  c
937.855 775.036 938.316 774.737 938.623 774.138  c
938.930 773.539 939.084 772.640 939.084 771.442  c
939.084 770.234 938.930 769.330 938.623 768.731  c
938.316 768.132 937.855 767.833 937.240 767.833  c
h
937.240 766.895 m
938.219 766.895 938.969 767.283 939.490 768.060  c
940.011 768.836 940.271 769.963 940.271 771.442  c
940.271 772.911 940.011 774.033 939.490 774.810  c
938.969 775.586 938.219 775.974 937.240 775.974  c
936.261 775.974 935.513 775.586 934.998 774.810  c
934.482 774.033 934.224 772.911 934.224 771.442  c
934.224 769.963 934.482 768.836 934.998 768.060  c
935.513 767.283 936.261 766.895 937.240 766.895  c
h
944.719 766.677 m
944.719 777.380 l
942.234 777.380 l
942.234 776.552 l
943.625 776.552 l
943.625 767.520 l
942.234 767.520 l
942.234 766.677 l
944.719 766.677 l
h
954.463 771.958 m
954.129 771.958 953.866 772.101 953.674 772.388  c
953.481 772.674 953.385 773.078 953.385 773.599  c
953.385 774.099 953.481 774.494 953.674 774.786  c
953.866 775.078 954.129 775.224 954.463 775.224  c
954.796 775.224 955.059 775.078 955.252 774.786  c
955.444 774.494 955.541 774.099 955.541 773.599  c
955.541 773.078 955.444 772.674 955.252 772.388  c
955.059 772.101 954.796 771.958 954.463 771.958  c
h
954.463 771.208 m
955.088 771.208 955.580 771.421 955.939 771.849  c
956.299 772.276 956.478 772.859 956.478 773.599  c
956.478 774.328 956.296 774.906 955.931 775.333  c
955.567 775.760 955.077 775.974 954.463 775.974  c
953.838 775.974 953.346 775.760 952.986 775.333  c
952.627 774.906 952.447 774.328 952.447 773.599  c
952.447 772.859 952.629 772.276 952.994 771.849  c
953.359 771.421 953.848 771.208 954.463 771.208  c
h
948.416 767.645 m
948.082 767.645 947.819 767.789 947.627 768.075  c
947.434 768.362 947.338 768.760 947.338 769.270  c
947.338 769.791 947.434 770.195 947.627 770.481  c
947.819 770.768 948.082 770.911 948.416 770.911  c
948.760 770.911 949.028 770.768 949.221 770.481  c
949.413 770.195 949.510 769.791 949.510 769.270  c
949.510 768.770 949.413 768.375 949.221 768.083  c
949.028 767.791 948.760 767.645 948.416 767.645  c
h
953.713 766.895 m
954.650 766.895 l
949.181 775.974 l
948.244 775.974 l
953.713 766.895 l
h
948.416 766.895 m
949.041 766.895 949.536 767.109 949.900 767.536  c
950.265 767.963 950.447 768.541 950.447 769.270  c
950.447 770.010 950.265 770.593 949.900 771.020  c
949.536 771.448 949.041 771.661 948.416 771.661  c
947.801 771.661 947.312 771.448 946.947 771.020  c
946.582 770.593 946.400 770.010 946.400 769.270  c
946.400 768.541 946.582 767.963 946.947 767.536  c
947.312 767.109 947.801 766.895 948.416 766.895  c
h
961.555 772.036 m
964.711 772.036 l
964.711 772.989 l
961.555 772.989 l
961.555 772.036 l
h
965.885 772.036 m
969.041 772.036 l
969.041 772.989 l
965.885 772.989 l
965.885 772.036 l
h
970.887 769.895 m
970.887 768.833 l
978.402 771.552 l
978.402 772.520 l
970.887 775.255 l
970.887 774.177 l
976.933 772.052 l
970.887 769.895 l
h
984.662 767.052 m
985.849 767.052 l
985.849 775.802 l
984.662 775.802 l
984.662 767.052 l
h
992.357 771.692 m
992.607 771.786 992.852 771.974 993.092 772.255  c
993.331 772.536 993.576 772.921 993.826 773.411  c
995.029 775.802 l
993.748 775.802 l
992.638 773.552 l
992.347 772.968 992.066 772.580 991.795 772.388  c
991.524 772.195 991.154 772.099 990.685 772.099  c
989.388 772.099 l
989.388 775.802 l
988.201 775.802 l
988.201 767.052 l
990.873 767.052 l
991.873 767.052 992.620 767.260 993.115 767.677  c
993.610 768.093 993.857 768.724 993.857 769.567  c
993.857 770.119 993.730 770.578 993.474 770.942  c
993.219 771.307 992.847 771.557 992.357 771.692  c
h
989.388 768.020 m
989.388 771.130 l
990.873 771.130 l
991.446 771.130 991.878 770.997 992.170 770.731  c
992.461 770.466 992.607 770.078 992.607 769.567  c
992.607 769.057 992.461 768.671 992.170 768.411  c
991.878 768.151 991.446 768.020 990.873 768.020  c
989.388 768.020 l
h
1000.70 771.692 m
1000.95 771.786 1001.19 771.974 1001.43 772.255  c
1001.67 772.536 1001.91 772.921 1002.16 773.411  c
1003.37 775.802 l
1002.09 775.802 l
1000.98 773.552 l
1000.68 772.968 1000.40 772.580 1000.13 772.388  c
999.862 772.195 999.492 772.099 999.023 772.099  c
997.726 772.099 l
997.726 775.802 l
996.539 775.802 l
996.539 767.052 l
999.211 767.052 l
1000.21 767.052 1000.96 767.260 1001.45 767.677  c
1001.95 768.093 1002.20 768.724 1002.20 769.567  c
1002.20 770.119 1002.07 770.578 1001.81 770.942  c
1001.56 771.307 1001.18 771.557 1000.70 771.692  c
h
997.726 768.020 m
997.726 771.130 l
999.211 771.130 l
999.784 771.130 1000.22 770.997 1000.51 770.731  c
1000.80 770.466 1000.95 770.078 1000.95 769.567  c
1000.95 769.057 1000.80 768.671 1000.51 768.411  c
1000.22 768.151 999.784 768.020 999.211 768.020  c
997.726 768.020 l
h
1004.88 767.052 m
1010.41 767.052 l
1010.41 768.052 l
1006.06 768.052 l
1006.06 770.645 l
1010.24 770.645 l
1010.24 771.630 l
1006.06 771.630 l
1006.06 774.802 l
1010.52 774.802 l
1010.52 775.802 l
1004.88 775.802 l
1004.88 767.052 l
h
1012.46 767.052 m
1013.65 767.052 l
1013.65 774.802 l
1017.91 774.802 l
1017.91 775.802 l
1012.46 775.802 l
1012.46 767.052 l
h
1019.14 767.052 m
1024.68 767.052 l
1024.68 768.052 l
1020.33 768.052 l
1020.33 770.645 l
1024.50 770.645 l
1024.50 771.630 l
1020.33 771.630 l
1020.33 774.802 l
1024.78 774.802 l
1024.78 775.802 l
1019.14 775.802 l
1019.14 767.052 l
h
1028.99 775.802 m
1025.65 767.052 l
1026.88 767.052 l
1029.66 774.411 l
1032.43 767.052 l
1033.66 767.052 l
1030.34 775.802 l
1028.99 775.802 l
h
1037.87 768.224 m
1036.26 772.567 l
1039.48 772.567 l
1037.87 768.224 l
h
1037.20 767.052 m
1038.54 767.052 l
1041.87 775.802 l
1040.64 775.802 l
1039.84 773.552 l
1035.90 773.552 l
1035.11 775.802 l
1033.86 775.802 l
1037.20 767.052 l
h
1043.14 767.052 m
1044.74 767.052 l
1048.63 774.364 l
1048.63 767.052 l
1049.77 767.052 l
1049.77 775.802 l
1048.18 775.802 l
1044.30 768.489 l
1044.30 775.802 l
1043.14 775.802 l
1043.14 767.052 l
h
1050.92 767.052 m
1058.31 767.052 l
1058.31 768.052 l
1055.21 768.052 l
1055.21 775.802 l
1054.03 775.802 l
1054.03 768.052 l
1050.92 768.052 l
1050.92 767.052 l
h
f
2 J
10.0000 M
.752941 .752941 .752941 RG
0 J
1.45000 M
1.00000 1.00000 1.00000 RG
newpath
901.523 760.647 m
901.523 782.647 l
901.523 784.857 903.314 786.647 905.523 786.647  c
1062.42 786.647 l
1064.63 786.647 1066.42 784.857 1066.42 782.647  c
1066.42 760.647 l
1066.42 758.438 1064.63 756.647 1062.42 756.647  c
905.523 756.647 l
903.314 756.647 901.523 758.438 901.523 760.647  c
h
S
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
